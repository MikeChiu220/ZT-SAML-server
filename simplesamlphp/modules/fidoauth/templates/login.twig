{% extends "base.twig" %}

{% set pagetitle = 'FIDO Authentication'|trans %}

{% block content %}
<h2>{{ 'FIDO Authentication'|trans }}</h2>
<p>{{ 'Please authenticate using your FIDO device.'|trans }}</p>

<form id="fido-form">
    <input type="hidden" name="AuthState" value="{{ AuthState }}" />
    <input type="hidden" name="challenge" value="{{ challenge }}" />
    <button type="button" onclick="startAuthentication()">{{ 'Authenticate with FIDO'|trans }}</button>
</form>

<div id="debug-info" style="margin-top: 20px; padding: 10px; border: 1px solid #ccc;">
    <h3>Debug Information:</h3>
    <p>Current URL: <span id="current-url"></span></p>
    <p>Hostname: <span id="hostname"></span></p>
    <p>Protocol: <span id="protocol"></span></p>
    <p>Challenge: <pre id="challenge-debug"></pre></p>
</div>

<div id="wait-message" style="display: none;">
    <p>{{ 'Waiting for FIDO Authentication...'|trans }}</p>
</div>

<div id="fido-info" style="display: none;">
    <h3>{{ 'FIDO Authentication Information'|trans }}</h3>
    <pre id="fido-info-content"></pre>
</div>

<script>
document.getElementById('current-url').textContent = window.location.href;
document.getElementById('hostname').textContent = window.location.hostname;
document.getElementById('protocol').textContent = window.location.protocol;
document.getElementById('challenge-debug').textContent = JSON.stringify({{ challenge|json_encode|raw }}, null, 2);

function checkWebAuthnSupport() {
    let support = {
        isSecureContext: window.isSecureContext,
        hasPublicKeyCredential: 'PublicKeyCredential' in window,
        hasCredentials: 'credentials' in navigator,
        hasNavigatorGet: navigator.credentials && typeof navigator.credentials.get === 'function'
    };
    
    console.log('WebAuthn Support:', support);
    
    let message = 'WebAuthn Support:\n';
    for (let [key, value] of Object.entries(support)) {
        message += `${key}: ${value}\n`;
    }
    console.log(message);
    
    return support.isSecureContext && support.hasPublicKeyCredential && support.hasCredentials && support.hasNavigatorGet;
}

function base64urlToUint8Array(base64url) {
    const padding = '='.repeat((4 - base64url.length % 4) % 4);
    const base64 = (base64url + padding)
        .replace(/-/g, '+')
        .replace(/_/g, '/');

    const rawData = atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}

function bufferToBase64Url(buffer) {
    const base64 = btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)));
    return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}

async function startAuthentication() {
    if (!checkWebAuthnSupport()) {
        console.error('WebAuthn is not fully supported in this browser.');
        return;
    }

    const form = document.getElementById('fido-form');
    const authState = form.elements['AuthState'].value;
    const challengeRaw = form.elements['challenge'].value;

    console.log('Raw challenge:', challengeRaw);

    document.getElementById('wait-message').style.display = 'block';

    try {
        const authResult = await performFidoAuthentication(challengeRaw);

        document.getElementById('wait-message').style.display = 'none';
        document.getElementById('fido-info').style.display = 'block';
        document.getElementById('fido-info-content').textContent = JSON.stringify(authResult, null, 2);

        // ... rest of the function ...
    } catch (error) {
        console.error('Error during authentication:', error);
        document.getElementById('wait-message').style.display = 'none';
        alert('Error during authentication: ' + error.message);
    }
}

async function performFidoAuthentication(challengeRaw) {
    console.log('Challenge received:', challengeRaw);

    let challengeObj;
    try {
        challengeObj = JSON.parse(challengeRaw);
        console.log('Parsed challenge:', challengeObj);
    } catch (error) {
        console.error('Error parsing challenge:', error);
        throw new Error('Invalid challenge format');
    }

    if (!challengeObj.challenge) {
        throw new Error('Challenge not found in parsed object');
    }

    const challenge = base64urlToUint8Array(challengeObj.challenge);
    console.log('Final challenge:', challenge);

    const options = {
        challenge: challenge,
        timeout: 60000,
        rpId: window.location.hostname,
        userVerification: "preferred"
    };

    console.log('Credential options:', options);

    try {
        const credential = await navigator.credentials.get({
            publicKey: options
        });

        const response = {
            id: credential.id,
            rawId: bufferToBase64Url(credential.rawId),
            type: credential.type,
            response: {
                authenticatorData: bufferToBase64Url(credential.response.authenticatorData),
                clientDataJSON: bufferToBase64Url(credential.response.clientDataJSON),
                signature: bufferToBase64Url(credential.response.signature)
            }
        };

        return response;
    } catch (error) {
        console.error('FIDO Authentication error:', error);
        throw error;
    }
}

</script>
{% endblock %}